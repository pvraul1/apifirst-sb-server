openapi: 3.0.3
info:
  version: 1.0.0
  title: API First with Spring Boot
  termsOfService: https://example.com/terms/
  contact:
    email: rperezv365@gmail.com
    url: http://springframework.guru/contact
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://redocly.github.io/openapi-template/logo.png
    altText: OpenAPI example logo
  description: >
    This is an **example** API to demonstrate features of the OpenAPI
    specification.
tags:
  - name: Customer
    description: Customer operations.
  - name: Product
    description: Product operations.
  - name: Order
    description: Order operations.
servers:
  - url: https://{tenant}/api/v1
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://springframework.guru/api/v1
paths:
  /v1/customers:
    get:
      tags:
        - Customer
      summary: Get a list of customers.
      description: Returns a list of customers.
      operationId: listCustomers
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_list'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Customer
      summary: Create a new customer.
      description: Creates a new customer.
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      responses:
        '201':
          description: Customer created.
          headers:
            Location:
              description: The location of the new customer.
              schema:
                type: string
                format: uri
                example: /v1/customers/123e4567-e89b-12d3-a456-426614174000
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /v1/customers/{customerId}:
    get:
      tags:
        - Customer
      summary: Get a customer by ID.
      description: Returns a single customer.
      operationId: getCustomerById
      parameters:
        - $ref: '#/components/parameters/customer_id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request.
        '404':
          description: Customer not found.
    put:
      tags:
        - Customer
      summary: Update an existing customer.
      description: Updates an existing customer.
      operationId: updateCustomerById
      parameters:
        - $ref: '#/components/parameters/customer_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request.
        '404':
          description: Customer not found.
    patch:
      tags:
        - Customer
      summary: Patch an existing customer.
      description: Patches an existing customer.
      operationId: patchCustomerById
      parameters:
        - $ref: '#/components/parameters/customer_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_patch'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request.
        '404':
          description: Customer not found.
    delete:
      tags:
        - Customer
      summary: Delete a customer by ID.
      description: Deletes a single customer.
      operationId: deleteCustomerById
      parameters:
        - $ref: '#/components/parameters/customer_id'
      responses:
        '204':
          description: No content.
        '400':
          description: Bad Request.
        '404':
          description: Customer not found.
  /v1/products:
    get:
      tags:
        - Product
      summary: Get a list of products.
      description: Returns a list of products.
      operationId: listProducts
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product_list'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Product
      summary: Create a new product.
      description: Creates a new product.
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product_create'
      responses:
        '201':
          description: Product created.
          headers:
            Location:
              description: The location of the created product.
              schema:
                type: string
                format: uri
                example: /v1/products/123e4567-e89b-12d3-a456-426614174000
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /v1/products/{productId}:
    get:
      tags:
        - Product
      summary: Get a product by ID.
      description: Returns a single product.
      operationId: getProductById
      parameters:
        - $ref: '#/components/parameters/product_id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          description: Bad Request.
        '404':
          description: Product not found.
    put:
      tags:
        - Product
      summary: Update an existing product.
      description: Updates an existing product.
      operationId: updateProductById
      parameters:
        - $ref: '#/components/parameters/product_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product_update'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          description: Bad Request.
        '404':
          description: Product not found.
    patch:
      tags:
        - Product
      summary: Patch an existing product.
      description: Patches an existing product.
      operationId: patchProductById
      parameters:
        - $ref: '#/components/parameters/product_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product_patch'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          description: Bad Request.
        '404':
          description: Product not found.
    delete:
      tags:
        - Product
      summary: Delete a product.
      description: Deletes a product.
      operationId: deleteProductById
      parameters:
        - $ref: '#/components/parameters/product_id'
      responses:
        '204':
          description: successful operation
        '400':
          description: Bad Request.
        '404':
          description: Product not found.
  /v1/orders:
    get:
      tags:
        - Order
      summary: Get all orders
      description: Get all orders.
      operationId: listOrders
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order_list'
        '400':
          description: Bad Request.
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Order
      summary: Create a new order.
      description: Create a new order.
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_create'
      responses:
        '201':
          description: Order created.
          headers:
            Location:
              description: The location of the created order.
              schema:
                type: string
                format: uri
                example: /v1/orders/123e4567-e89b-12d3-a456-426614174000
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /v1/orders/{orderId}:
    get:
      tags:
        - Order
      summary: Get order by ID
      description: Get order by ID.
      operationId: getOrderById
      parameters:
        - $ref: '#/components/parameters/order_id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        '400':
          description: Bad Request.
        '404':
          description: Order not found.
    put:
      tags:
        - Order
      summary: Update order
      description: Update order.
      operationId: updateOrder
      parameters:
        - $ref: '#/components/parameters/order_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_update'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        '400':
          description: Bad Request.
        '404':
          description: Order not found.
    patch:
      tags:
        - Order
      summary: Patch order
      description: Patch order.
      operationId: patchOrder
      parameters:
        - $ref: '#/components/parameters/order_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_patch'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        '400':
          description: Bad Request.
        '404':
          description: Order not found.
    delete:
      tags:
        - Order
      summary: Delete order
      description: Delete order.
      operationId: deleteOrderById
      parameters:
        - $ref: '#/components/parameters/order_id'
      responses:
        '204':
          description: Not content.
        '400':
          description: Bad Request.
        '404':
          description: Order not found.
  /v1/categories:
    get:
      tags:
        - Products
      summary: List all categories.
      description: List categories.
      operationId: listCategories
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_list'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
security:
  - basic_auth: []
components:
  securitySchemes:
    main_auth:
      description: Example description text of the OAuth2 scheme.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            read:users: read user info
            write:users: modify or remove users
    api_key:
      description: Example description text of the API key scheme.
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
  schemas:
    uuid_id:
      type: string
      format: uuid
      description: System generated unique identifier for the resource.
      example: 123e4567-e89b-12d3-a456-426614174000
      readOnly: true
      nullable: true
    name:
      type: object
      properties:
        prefix:
          type: string
          description: The prefix of the customer's name.
          example: Mr.
          minLength: 0
          maxLength: 25
          nullable: true
        firstName:
          type: string
          description: The first name of the customer.
          example: John
          minLength: 2
          maxLength: 100
        lastName:
          type: string
          description: The last name of the customer.
          example: Doe
          minLength: 2
          maxLength: 100
        suffix:
          type: string
          description: The suffix of the customer's name.
          example: Jr.
          minLength: 0
          maxLength: 25
          nullable: true
      required:
        - firstName
        - lastName
    iso_timestamp:
      type: string
      format: date-time
      description: >-
        ISO 8601 Timestamp. Date Created and Date Updated are system managed
        values,  should not be sent in request payloads - will be ignored.
      example: '2022-08-22T11:43:06-07:00'
      title: ISO Timestamp
      readOnly: true
      nullable: true
    address:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        addressLine1:
          type: string
          description: The first line of the customer's address.
          example: 123 Main St.
          minLength: 3
          maxLength: 100
        addressLine2:
          type: string
          description: The second line of the customer's address.
          example: Suite 200
          minLength: 3
          maxLength: 100
          nullable: true
        city:
          type: string
          description: The city of the customer's address.
          example: St Louis
          minLength: 2
          maxLength: 100
        state:
          type: string
          description: Two characters state code of the customer's address.
          example: WA
          minLength: 2
          maxLength: 2
        zip:
          type: string
          description: The zip code of the customer's address.
          example: '33701'
          minLength: 5
          maxLength: 10
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - addressLine1
        - city
        - state
        - zip
    payment_method:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        displayName:
          type: string
          description: The display name of the payment method.
          example: My Chase Card
          minLength: 2
          maxLength: 100
        cardNumber:
          type: integer
          description: The card number of the payment method.
          example: 4111111111111111
        expiryMonth:
          type: integer
          description: The expiry month of the payment method.
          example: 12
        expiryYear:
          type: integer
          description: The expiry year of the payment method.
          example: 26
        cvv:
          type: integer
          description: The CVV of the payment method.
          example: 123
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - displayName
        - cardNumber
        - expiryMonth
        - expiryYear
        - cvv
    customer:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        name:
          $ref: '#/components/schemas/name'
        shipToAddress:
          $ref: '#/components/schemas/address'
        billToAddress:
          $ref: '#/components/schemas/address'
        email:
          type: string
          description: The email address of the customer.
          maxLength: 255
          minLength: 3
          example: rperezv365@gmail.com
          nullable: true
        phone:
          type: string
          description: The phone number of the customer.
          maxLength: 15
          minLength: 7
          example: 123-456-7890
          nullable: true
        paymentMethods:
          type: array
          nullable: true
          description: The payment methods of the customer.
          items:
            $ref: '#/components/schemas/payment_method'
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - name
        - shipToAddress
        - billToAddress
    customer_list:
      type: array
      items:
        $ref: '#/components/schemas/customer'
    Problem:
      type: object
      additionalProperties: true
      minProperties: 1
      description: >-
        The Problem Details JSON Object
        [[RFC7807](https://tools.ietf.org/html/rfc7807)].
      properties:
        type:
          type: string
          description: >-
            A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]
            that identifies the problem type. It should provide human-readable
            documentation for the problem type. When this member is not present,
            its value is assumed to be "about:blank".
          format: uri
        title:
          type: string
          description: >-
            A short, human-readable summary of the problem type. It SHOULD NOT
            change from occurrence to occurrence of the problem, except for
            purposes of localization.
        status:
          type: integer
          description: The HTTP status code.
          minimum: 400
          maximum: 599
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem.
        instance:
          type: string
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem.  It may or may not yield further information if
            dereferenced.
    customer_name_patch:
      type: object
      properties:
        prefix:
          type: string
          description: The prefix of the customer's name.
          example: Mr.
          minLength: 0
          maxLength: 25
          nullable: true
        firstName:
          type: string
          description: The first name of the customer.
          example: John
          minLength: 2
          maxLength: 100
          nullable: true
        lastName:
          type: string
          description: The last name of the customer.
          example: Doe
          minLength: 2
          maxLength: 100
          nullable: true
        suffix:
          type: string
          description: The suffix of the customer's name.
          example: Jr.
          minLength: 0
          maxLength: 25
          nullable: true
    customer_address_patch:
      type: object
      nullable: true
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the customer.
          example: 123e4567-e89b-12d3-a456-426614174000
        addressLine1:
          type: string
          description: The first line of the customer's address.
          example: 123 Main St.
          minLength: 3
          maxLength: 100
          nullable: true
        addressLine2:
          type: string
          description: The second line of the customer's address.
          example: Suite 200
          minLength: 3
          maxLength: 100
          nullable: true
        city:
          type: string
          description: The city of the customer's address.
          example: St Louis
          minLength: 2
          maxLength: 100
          nullable: true
        state:
          type: string
          description: Two characters state code of the customer's address.
          example: WA
          minLength: 2
          maxLength: 2
          nullable: true
        zip:
          type: string
          description: The zip code of the customer's address.
          example: '33701'
          minLength: 5
          maxLength: 10
          nullable: true
      required:
        - id
    customer_payment_method_patch:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the payment method.
        displayName:
          type: string
          description: The display name of the payment method.
          example: My Chase Card
          minLength: 2
          maxLength: 100
          nullable: true
        cardNumber:
          type: integer
          description: The card number of the payment method.
          example: 4111111111111111
          nullable: true
        expiryMonth:
          type: integer
          description: The expiry month of the payment method.
          example: 12
          nullable: true
        expiryYear:
          type: integer
          description: The expiry year of the payment method.
          example: 26
          nullable: true
        cvv:
          type: integer
          description: The CVV of the payment method.
          example: 123
          nullable: true
      required:
        - id
    customer_patch:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        name:
          $ref: '#/components/schemas/customer_name_patch'
        shipToAddress:
          $ref: '#/components/schemas/customer_address_patch'
          nullable: true
        billToAddress:
          $ref: '#/components/schemas/customer_address_patch'
          nullable: true
        email:
          type: string
          description: The email address of the customer.
          maxLength: 255
          minLength: 3
          example: rperezv365@gmail.com
          nullable: true
        phone:
          type: string
          description: The phone number of the customer.
          maxLength: 15
          minLength: 7
          example: 123-456-7890
          nullable: true
        paymentMethods:
          type: array
          nullable: true
          description: The payment methods of the customer.
          items:
            $ref: '#/components/schemas/customer_payment_method_patch'
    dimensions:
      type: object
      properties:
        length:
          type: integer
          description: The length of the product.
          minimum: 1
          maximum: 999
          example: 10
        width:
          type: integer
          description: The width of the product.
          minimum: 1
          maximum: 999
          example: 10
        height:
          type: integer
          description: The height of the product.
          minimum: 1
          maximum: 999
          example: 10
      description: The dimentions of a product.
      required:
        - length
        - width
        - height
    category:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        category:
          type: string
          description: The category of the product.
          minLength: 3
          maxLength: 25
          example: Electronics
        description:
          type: string
          description: A description of the category.
          minLength: 3
          maxLength: 255
          example: Electronics and gadgets
        category_code:
          type: string
          description: The category code of the product.
          minLength: 3
          maxLength: 25
          example: ELECTRONIC
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - category
        - description
        - category_code
    image:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        url:
          type: string
          format: url
          description: The URL of the image.
          minLength: 5
          maxLength: 500
          example: https://www.example.com/image.jpg
        altText:
          type: string
          description: The alt text of the image.
          minLength: 3
          maxLength: 255
          nullable: true
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - url
    product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for a product.
          readOnly: true
          nullable: true
        description:
          type: string
          description: A description of the product.
          minLength: 3
          maxLength: 255
        dimensions:
          $ref: '#/components/schemas/dimensions'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/category'
        images:
          type: array
          items:
            $ref: '#/components/schemas/image'
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
        cost:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - description
        - price
    product_list:
      type: array
      items:
        $ref: '#/components/schemas/product'
    product_create:
      type: object
      properties:
        description:
          type: string
          description: A description of the product.
          minLength: 3
          maxLength: 255
        dimensions:
          $ref: '#/components/schemas/dimensions'
        categories:
          type: array
          description: The categories codes for the product.
          items:
            type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/image'
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
        cost:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
      required:
        - description
        - price
    product_image_update:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the image.
          nullable: true
        url:
          type: string
          format: url
          description: The URL of the image.
          minLength: 5
          maxLength: 500
          example: https://www.example.com/image.jpg
        altText:
          type: string
          description: The alt text of the image.
          minLength: 3
          maxLength: 255
          nullable: true
      required:
        - url
        - id
    product_update:
      type: object
      properties:
        description:
          type: string
          description: A description of the product.
          minLength: 3
          maxLength: 255
        dimensions:
          $ref: '#/components/schemas/dimensions'
        categories:
          type: array
          description: The categories codes for the product.
          items:
            type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/product_image_update'
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
        cost:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
      required:
        - description
        - price
    product_dimensions_path:
      type: object
      properties:
        length:
          type: integer
          description: The length of the product.
          minimum: 1
          maximum: 999
          example: 10
          nullable: true
        width:
          type: integer
          description: The width of the product.
          minimum: 1
          maximum: 999
          example: 10
          nullable: true
        height:
          type: integer
          description: The height of the product.
          minimum: 1
          maximum: 999
          example: 10
          nullable: true
      description: The dimentions of a product.
    product_image_patch:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the image.
        url:
          type: string
          format: url
          description: The URL of the image.
          minLength: 5
          maxLength: 500
          example: https://www.example.com/image.jpg
          nullable: true
        altText:
          type: string
          description: The alt text of the image.
          minLength: 3
          maxLength: 255
          nullable: true
      required:
        - id
    product_patch:
      type: object
      properties:
        description:
          type: string
          description: A description of the product.
          minLength: 3
          maxLength: 255
          nullable: true
        dimensions:
          $ref: '#/components/schemas/product_dimensions_path'
        categories:
          type: array
          description: The categories codes for the product.
          items:
            type: string
          nullable: true
        images:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/product_image_patch'
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
          nullable: true
        cost:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
          nullable: true
    order_customer:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        name:
          $ref: '#/components/schemas/name'
        shipToAddress:
          $ref: '#/components/schemas/address'
        billToAddress:
          $ref: '#/components/schemas/address'
        email:
          type: string
          description: The email address of the customer.
          nullable: true
        phone:
          type: string
          description: The phone number of the customer.
        selectedPaymentMethod:
          $ref: '#/components/schemas/payment_method'
    order_product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the product.
        description:
          type: string
          description: The description of the product.
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
    order_line:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        product:
          $ref: '#/components/schemas/order_product'
        orderQuantity:
          type: integer
          description: The quantity of the product in the order.
          minimum: 1
          maximum: 10000
          example: 2
        shipQuantity:
          type: integer
          description: The quantity of the product shipped.
          minimum: 1
          maximum: 10000
          example: 2
          nullable: true
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - product
        - orderQuantity
    order:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid_id'
        customer:
          $ref: '#/components/schemas/order_customer'
        orderStatus:
          type: string
          enum:
            - NEW
            - HOLD
            - SHIPPED
            - DELIVERED
            - CLOSED
          default: NEW
        shipmentInfo:
          type: string
          minLength: 1
          maxLength: 255
          nullable: true
        orderLines:
          type: array
          items:
            $ref: '#/components/schemas/order_line'
          description: The order lines of the order
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - customer
        - orderStatus
        - orderLines
    order_list:
      type: array
      items:
        $ref: '#/components/schemas/order'
    order_line_create:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: The unique identifier of the product.
        orderQuantity:
          type: integer
          description: The quantity of the product in the order.
          minimum: 1
          maximum: 1000
          example: 2
      required:
        - productId
        - orderQuantity
    order_create:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          description: The unique identifier of the customer.
        selectPaymentMethodId:
          type: string
          format: uuid
          nullable: true
        orderLines:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/order_line_create'
          description: The order lines of the order
      required:
        - customerId
    order_line_update:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the order line.
        productId:
          type: string
          format: uuid
          description: The unique identifier of the product.
        orderQuantity:
          type: integer
          description: The quantity of the product in the order.
          minimum: 1
          maximum: 1000
          example: 2
      required:
        - id
        - productId
        - orderQuantity
    order_update:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          description: The unique identifier of the customer.
        selectPaymentMethodId:
          type: string
          format: uuid
          nullable: true
        orderLines:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/order_line_update'
          description: The order lines of the order
      required:
        - customerId
    order_line_patch:
      type: object
      nullable: true
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the order line.
        productId:
          type: string
          format: uuid
          description: The unique identifier of the product.
          nullable: true
        orderQuantity:
          type: integer
          description: The quantity of the product in the order.
          minimum: 1
          maximum: 1000
          example: 2
          nullable: true
      required:
        - id
    order_patch:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          description: The unique identifier of the customer.
          nullable: true
        selectPaymentMethodId:
          type: string
          format: uuid
          nullable: true
        orderLines:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/order_line_patch'
          description: The order lines of the order
    category_list:
      type: array
      items:
        $ref: '#/components/schemas/category'
  parameters:
    customer_id:
      name: customerId
      in: path
      description: ID of customer.
      required: true
      schema:
        type: string
        format: uuid
    product_id:
      name: productId
      in: path
      description: ID of product.
      required: true
      schema:
        type: string
        format: uuid
    order_id:
      name: orderId
      in: path
      description: ID of order.
      required: true
      schema:
        type: string
        format: uuid
